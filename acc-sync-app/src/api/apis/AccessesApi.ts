/* tslint:disable */
/* eslint-disable */
/**
 * kartografia-backend
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AccessDTO,
  CreateAccessDTO,
} from '../models';
import {
    AccessDTOFromJSON,
    AccessDTOToJSON,
    CreateAccessDTOFromJSON,
    CreateAccessDTOToJSON,
} from '../models';

export interface ApiAccessesByAppIdAppIdGetRequest {
    appId: number;
}

export interface ApiAccessesIdDeleteRequest {
    id: number;
}

export interface ApiAccessesIdGetRequest {
    id: number;
}

export interface ApiAccessesPostRequest {
    createAccessDTO?: CreateAccessDTO;
}

/**
 * 
 */
export class AccessesApi extends runtime.BaseAPI {

    /**
     * Get access by appID
     */
    async apiAccessesByAppIdAppIdGetRaw(requestParameters: ApiAccessesByAppIdAppIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<AccessDTO>>> {
        if (requestParameters.appId === null || requestParameters.appId === undefined) {
            throw new runtime.RequiredError('appId','Required parameter requestParameters.appId was null or undefined when calling apiAccessesByAppIdAppIdGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Accesses/ByAppId/{appId}`.replace(`{${"appId"}}`, encodeURIComponent(String(requestParameters.appId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(AccessDTOFromJSON));
    }

    /**
     * Get access by appID
     */
    async apiAccessesByAppIdAppIdGet(requestParameters: ApiAccessesByAppIdAppIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<AccessDTO>> {
        const response = await this.apiAccessesByAppIdAppIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get all accesses
     */
    async apiAccessesGetRaw(token:string,initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<AccessDTO>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Accesses`,
            method: 'GET',
            headers: {
                ...headerParameters,
                'Authorization': `Bearer ${token}`,
              },
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(AccessDTOFromJSON));
    }

    /**
     * Get all accesses
     */
    async apiAccessesGet(token:string,initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<AccessDTO>> {
        const response = await this.apiAccessesGetRaw(token,initOverrides);
        return await response.value();
    }

    /**
     * Delete access by id
     */
    async apiAccessesIdDeleteRaw(token:string,requestParameters: ApiAccessesIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling apiAccessesIdDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Accesses/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: {
                ...headerParameters,
                'Authorization': `Bearer ${token}`,
              },
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete access by id
     */
    async apiAccessesIdDelete(token:string,requestParameters: ApiAccessesIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiAccessesIdDeleteRaw(token,requestParameters, initOverrides);
    }

    /**
     * Get access by id
     */
    async apiAccessesIdGetRaw(requestParameters: ApiAccessesIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AccessDTO>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling apiAccessesIdGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Accesses/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AccessDTOFromJSON(jsonValue));
    }

    /**
     * Get access by id
     */
    async apiAccessesIdGet(requestParameters: ApiAccessesIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AccessDTO> {
        const response = await this.apiAccessesIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Add new access
     */
    async apiAccessesPostRaw(token:string,requestParameters: ApiAccessesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Accesses`,
            method: 'POST',
            headers: {
                ...headerParameters,
                'Authorization': `Bearer ${token}`,
              },
            query: queryParameters,
            body: CreateAccessDTOToJSON(requestParameters.createAccessDTO),
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Add new access
     */
    async apiAccessesPost(token:string,requestParameters: ApiAccessesPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.apiAccessesPostRaw(token,requestParameters, initOverrides);
        return await response.value();
    }

}
