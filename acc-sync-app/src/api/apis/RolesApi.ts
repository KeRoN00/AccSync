/* tslint:disable */
/* eslint-disable */
/**
 * kartografia-backend
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  RoleDTO,
} from '../models';
import {
    RoleDTOFromJSON,
    RoleDTOToJSON,
} from '../models';

export interface ApiRolesIdDeleteRequest {
    id: number;
}

export interface ApiRolesPostRequest {
    roleDTO?: RoleDTO;
}

export interface ApiRolesPutRequest {
    roleDTO?: RoleDTO;
}

/**
 * 
 */
export class RolesApi extends runtime.BaseAPI {

    /**
     * Get all roles
     */
    async apiRolesGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<RoleDTO>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Roles`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(RoleDTOFromJSON));
    }

    /**
     * Get all roles
     */
    async apiRolesGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<RoleDTO>> {
        const response = await this.apiRolesGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Delete role by id
     */
    async apiRolesIdDeleteRaw(requestParameters: ApiRolesIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling apiRolesIdDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Roles/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete role by id
     */
    async apiRolesIdDelete(requestParameters: ApiRolesIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiRolesIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Add new role
     */
    async apiRolesPostRaw(requestParameters: ApiRolesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Roles`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RoleDTOToJSON(requestParameters.roleDTO),
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Add new role
     */
    async apiRolesPost(requestParameters: ApiRolesPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.apiRolesPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update role name
     */
    async apiRolesPutRaw(requestParameters: ApiRolesPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Roles`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: RoleDTOToJSON(requestParameters.roleDTO),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Update role name
     */
    async apiRolesPut(requestParameters: ApiRolesPutRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiRolesPutRaw(requestParameters, initOverrides);
    }

}
