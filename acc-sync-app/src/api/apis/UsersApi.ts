/* tslint:disable */
/* eslint-disable */
/**
 * kartografia-backend
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime";
import type { LoginDTO, SignupDTO, UserDTO } from "../models";
import {
  LoginDTOFromJSON,
  LoginDTOToJSON,
  SignupDTOFromJSON,
  SignupDTOToJSON,
  UserDTOFromJSON,
  UserDTOToJSON,
} from "../models";

export interface ApiUsersAddUserPostRequest {
  signupDTO?: SignupDTO;
}

export interface ApiUsersIdDeleteRequest {
  id: number;
}

export interface ApiUsersPostRequest {
  loginDTO?: LoginDTO;
}

/**
 *
 */
export class UsersApi extends runtime.BaseAPI {
  /**
   * Add new user
   */
  async apiUsersAddUserPostRaw(
    token: string,
    requestParameters: ApiUsersAddUserPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<string>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        this.configuration.apiKey("Authorization"); // Bearer authentication
    }

    const response = await this.request(
      {
        path: `/api/Users/add-user`,
        method: "POST",
        headers: {
            ...headerParameters,
            'Authorization': `Bearer ${token}`,
          },
        query: queryParameters,
        body: SignupDTOToJSON(requestParameters.signupDTO),
      },
      initOverrides
    );

    return new runtime.TextApiResponse(response) as any;
  }

  /**
   * Add new user
   */
  async apiUsersAddUserPost(
    token: string,
    requestParameters: ApiUsersAddUserPostRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<string> {
    const response = await this.apiUsersAddUserPostRaw(
      token,
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Get all users
   */
  async apiUsersGetRaw(
    token: string,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<Array<UserDTO>>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};
    const response = await this.request({
      path: `/api/Users`,
      method: "GET",
      headers: {
        ...headerParameters,
        'Authorization': `Bearer ${token}`,
       
      },
      query: queryParameters,
    });
    return new runtime.JSONApiResponse(response, (jsonValue) =>
      jsonValue.map(UserDTOFromJSON)
    );
  }

  /**
   * Get all users
   */
  async apiUsersGet(
    token: string,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<Array<UserDTO>> {
    const response = await this.apiUsersGetRaw(token, initOverrides);
    return await response.value();
  }

  /**
   */
  async apiUsersIdDeleteRaw(
    token: string,
    requestParameters: ApiUsersIdDeleteRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<string>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        "id",
        "Required parameter requestParameters.id was null or undefined when calling apiUsersIdDelete."
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        this.configuration.apiKey("Authorization"); // Bearer authentication
    }

    const response = await this.request(
      {
        path: `/api/Users/{id}`.replace(
          `{${"id"}}`,
          encodeURIComponent(String(requestParameters.id))
        ),
        method: "DELETE",
        headers: {
            ...headerParameters,
            'Authorization': `Bearer ${token}`,
           
          },
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.TextApiResponse(response) as any;
  }

  /**
   */
  async apiUsersIdDelete(
    token: string,
    requestParameters: ApiUsersIdDeleteRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<string> {
    const response = await this.apiUsersIdDeleteRaw(
        token,
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Login user
   */
  async apiUsersPostRaw(
    requestParameters: ApiUsersPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<string>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        this.configuration.apiKey("Authorization"); // Bearer authentication
    }

    const response = await this.request(
      {
        path: `/api/Users`,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: LoginDTOToJSON(requestParameters.loginDTO),
      },
      initOverrides
    );

    return new runtime.TextApiResponse(response) as any;
  }

  /**
   * Login user
   */
  async apiUsersPost(
    requestParameters: ApiUsersPostRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<string> {
    const response = await this.apiUsersPostRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }
}
